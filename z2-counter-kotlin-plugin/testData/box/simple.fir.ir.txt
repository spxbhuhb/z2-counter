FILE fqName:foo.bar fileName:/simple.kt
  PROPERTY name:manualCounter visibility:public modality:FINAL [var]
    FIELD PROPERTY_BACKING_FIELD name:manualCounter type:kotlin.Long visibility:private [static]
      EXPRESSION_BODY
        CONST Long type=kotlin.Long value=0
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-manualCounter> visibility:public modality:FINAL <> () returnType:kotlin.Long
      correspondingProperty: PROPERTY name:manualCounter visibility:public modality:FINAL [var]
      BLOCK_BODY
        CALL 'public final fun increment (fileName: kotlin.String, functionName: kotlin.String, line: kotlin.Int, offset: kotlin.Int): kotlin.Unit declared in hu.simplexion.z2.counter.runtime.Counters' type=kotlin.Unit origin=null
          $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
          fileName: CONST String type=kotlin.String value="simple.kt"
          functionName: CONST String type=kotlin.String value="<get-manualCounter>"
          line: CONST Int type=kotlin.Int value=4
          offset: CONST Int type=kotlin.Int value=0
        RETURN type=kotlin.Nothing from='public final fun <get-manualCounter> (): kotlin.Long declared in foo.bar'
          GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:manualCounter type:kotlin.Long visibility:private [static]' type=kotlin.Long origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<set-manualCounter> visibility:public modality:FINAL <> (<set-?>:kotlin.Long) returnType:kotlin.Unit
      correspondingProperty: PROPERTY name:manualCounter visibility:public modality:FINAL [var]
      VALUE_PARAMETER name:<set-?> index:0 type:kotlin.Long
      BLOCK_BODY
        CALL 'public final fun increment (fileName: kotlin.String, functionName: kotlin.String, line: kotlin.Int, offset: kotlin.Int): kotlin.Unit declared in hu.simplexion.z2.counter.runtime.Counters' type=kotlin.Unit origin=null
          $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
          fileName: CONST String type=kotlin.String value="simple.kt"
          functionName: CONST String type=kotlin.String value="<set-manualCounter>"
          line: CONST Int type=kotlin.Int value=4
          offset: CONST Int type=kotlin.Int value=0
        SET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:manualCounter type:kotlin.Long visibility:private [static]' type=kotlin.Unit origin=null
          value: GET_VAR '<set-?>: kotlin.Long declared in foo.bar.<set-manualCounter>' type=kotlin.Long origin=null
  FUN name:stuff visibility:public modality:FINAL <> () returnType:kotlin.Unit
    BLOCK_BODY
      CALL 'public final fun increment (fileName: kotlin.String, functionName: kotlin.String, line: kotlin.Int, offset: kotlin.Int): kotlin.Unit declared in hu.simplexion.z2.counter.runtime.Counters' type=kotlin.Unit origin=null
        $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
        fileName: CONST String type=kotlin.String value="simple.kt"
        functionName: CONST String type=kotlin.String value="stuff"
        line: CONST Int type=kotlin.Int value=6
        offset: CONST Int type=kotlin.Int value=0
      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
        BLOCK type=kotlin.Long origin=null
          VAR IR_TEMPORARY_VARIABLE name:tmp_0 type:kotlin.Long [val]
            CALL 'public final fun <get-manualCounter> (): kotlin.Long declared in foo.bar' type=kotlin.Long origin=GET_PROPERTY
          CALL 'public final fun <set-manualCounter> (<set-?>: kotlin.Long): kotlin.Unit declared in foo.bar' type=kotlin.Unit origin=EQ
            <set-?>: CALL 'public final fun inc (): kotlin.Long [operator] declared in kotlin.Long' type=kotlin.Long origin=null
              $this: GET_VAR 'val tmp_0: kotlin.Long [val] declared in foo.bar.stuff' type=kotlin.Long origin=null
          GET_VAR 'val tmp_0: kotlin.Long [val] declared in foo.bar.stuff' type=kotlin.Long origin=null
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun increment (fileName: kotlin.String, functionName: kotlin.String, line: kotlin.Int, offset: kotlin.Int): kotlin.Unit declared in hu.simplexion.z2.counter.runtime.Counters' type=kotlin.Unit origin=null
        $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
        fileName: CONST String type=kotlin.String value="simple.kt"
        functionName: CONST String type=kotlin.String value="box"
        line: CONST Int type=kotlin.Int value=10
        offset: CONST Int type=kotlin.Int value=0
      BLOCK type=kotlin.Unit origin=FOR_LOOP
        VAR FOR_LOOP_ITERATOR name:tmp_1 type:kotlin.collections.IntIterator [val]
          CALL 'public open fun iterator (): kotlin.collections.IntIterator [fake_override,operator] declared in kotlin.ranges.IntRange' type=kotlin.collections.IntIterator origin=FOR_LOOP_ITERATOR
            $this: CALL 'public final fun rangeTo (other: kotlin.Int): kotlin.ranges.IntRange [operator] declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
              $this: CONST Int type=kotlin.Int value=0
              other: CONST Int type=kotlin.Int value=123
        WHILE label=null origin=FOR_LOOP_INNER_WHILE
          condition: CALL 'public abstract fun hasNext (): kotlin.Boolean [fake_override,operator] declared in kotlin.collections.IntIterator' type=kotlin.Boolean origin=FOR_LOOP_HAS_NEXT
            $this: GET_VAR 'val tmp_1: kotlin.collections.IntIterator [val] declared in foo.bar.box' type=kotlin.collections.IntIterator origin=null
          body: BLOCK type=kotlin.Unit origin=FOR_LOOP_INNER_WHILE
            VAR FOR_LOOP_VARIABLE name:i type:kotlin.Int [val]
              CALL 'public final fun next (): kotlin.Int [operator] declared in kotlin.collections.IntIterator' type=kotlin.Int origin=FOR_LOOP_NEXT
                $this: GET_VAR 'val tmp_1: kotlin.collections.IntIterator [val] declared in foo.bar.box' type=kotlin.collections.IntIterator origin=null
            CALL 'public final fun stuff (): kotlin.Unit declared in foo.bar' type=kotlin.Unit origin=null
      CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
        message: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in foo.bar'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              arg0: CALL 'public abstract fun get (key: K of kotlin.collections.MutableMap): V of kotlin.collections.MutableMap? [fake_override,operator] declared in kotlin.collections.MutableMap' type=kotlin.Long? origin=null
                $this: CALL 'public final fun <get-counters> (): kotlin.collections.MutableMap<kotlin.String, kotlin.Long> declared in hu.simplexion.z2.counter.runtime.Counters' type=kotlin.collections.MutableMap<kotlin.String, kotlin.Long> origin=GET_PROPERTY
                  $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Counters modality:FINAL visibility:public superTypes:[kotlin.Any]' type=hu.simplexion.z2.counter.runtime.Counters
                key: CONST String type=kotlin.String value="simple.kt:stuff:6:0"
              arg1: CALL 'public final fun <get-manualCounter> (): kotlin.Long declared in foo.bar' type=kotlin.Long origin=GET_PROPERTY
            then: CONST String type=kotlin.String value="OK"
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST String type=kotlin.String value="Fail"
